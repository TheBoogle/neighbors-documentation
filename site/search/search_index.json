{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Neighbors Documentation","text":""},{"location":"#who-is-this-for","title":"Who is this for?","text":"<p>This page is purely for developers of the Roblox game \"Neighbors\"</p> <p>If you see this and you are not that, fuck off!</p>"},{"location":"Developer%20Handbook/1/","title":"Welcome!","text":"<p>Welcome to the Neighbors development team. This document outlines how we do things, what we expect from you, and other important pieces of information. Feel free to ask any questions.</p>"},{"location":"Developer%20Handbook/2/","title":"Expectations &amp; General Responsibilities","text":"<p>As a developer @ Neighbors, we expect you to be fully responsible for your work. As we are a small team, every contribution to the game is significant and noticeable.</p> <p>Other expectations include: Being communicative. This means keeping everyone updated on your work, any problems you\u2019re facing, etc. If you are out sick for example, please let your manager know as soon as possible. Making sure your work is high quality &amp; to the best of your ability. Don\u2019t send in half-assed work. Being on time &amp; diligent.</p>"},{"location":"Developer%20Handbook/3/","title":"How We Work","text":"<p>We utilize both Discord &amp; Trello to keep everyone on the same page. We don\u2019t have any real meetings (voice calls) but there may be small discussions once in a while in the appropriate channels.</p> <p>There are two Trello boards to keep track of the development board &amp; the ideas board. The ideas board is self-explanatory, it's a board where you can add any of your ideas for the game. Feel free to also add ideas you personally like from #suggestions to this board.</p> <p>The development board is used to keep track of all of the tasks to be completed that week. You\u2019ll use this board to see what you need to work on &amp; what the current state of the project is.</p>"},{"location":"Developer%20Handbook/4/","title":"Payment","text":"<p>Payment is done weekly every Friday based on the total number of hours since the last payment.</p>"},{"location":"Developer%20Handbook/5/","title":"Updates","text":"<p>Updates occur every TWO weeks on Friday. All tasks need to be completed by the end of Wednesday of the update week. Thursday and Friday are days when any final testing or last-minute changes can occur.</p>"},{"location":"Developer%20Handbook/6/","title":"Benefits","text":"<p>As a developer, you are naturally given some perks. This includes: * Competitive pay &amp; flexible hours. No meetings, no set hours, and nothing too formal. * Admin Commands - some fun commands as well. However, these should not be abused. * An exclusive Developer title. * A say in where the game goes. Your work directly impacts the game significantly, you can visibly see your contributions in the game, unlike other larger games. * Real experience. We hope to make everyone (including ourselves) better at making games so that in the future, we may partake in bigger projects.</p>"},{"location":"Developer%20Handbook/7/","title":"Additional","text":"<p>If you have any issues preventing you from finishing your tasks on time, let your manager know as soon as possible. Don\u2019t wait last minute.</p>"},{"location":"Developer%20Handbook/Development%20Board/1/","title":"Lists &amp; Their Usage","text":""},{"location":"Developer%20Handbook/Development%20Board/1/#backlog","title":"Backlog","text":"<p>These are tasks planned for the future. You don\u2019t have to worry about this.</p>"},{"location":"Developer%20Handbook/Development%20Board/1/#todo","title":"Todo","text":"<p>These are tasks that are to be completed this week. You will find your tasks in this section so keep an eye out.</p>"},{"location":"Developer%20Handbook/Development%20Board/1/#in-progress-doing","title":"In-Progress / Doing","text":"<p>These are tasks that are currently being worked on.</p>"},{"location":"Developer%20Handbook/Development%20Board/1/#qa","title":"QA","text":"<p>These are tasks that are in the testing phase. Once they are fully tested and shown to have no bugs will they finally move out of this list.</p>"},{"location":"Developer%20Handbook/Development%20Board/1/#completed","title":"Completed","text":"<p>These are fully tested &amp; done tasks. Only after QA testing is completed can these tasks be moved here.</p>"},{"location":"Developer%20Handbook/Development%20Board/2/","title":"Process","text":"<p>On Monday, the task board should be repopulated with new tasks. You can find tasks assigned to you by looking inside the to-do list and seeing which ones have your profile picture attached to them.</p> <p>On the same day, your manager will tell you what you should work on &amp; prioritize. You can view additional information about the task by clicking on the task card. </p> <p>You should now follow the process: * When you want to start working on a task, move the card (the task) to the In-Progress list.      * Make sure you start the timer inside the card so that your time can be accounted for. Stop the timer when you are taking a break or no longer working on the task.</p> <ul> <li> <p>Once you\u2019re finished with the task, move the card to QA and notify your manager that you\u2019re finished. </p> </li> <li> <p>Go to #tester-chat and tag the testers. Your task will be tested by QA for any bugs and/or tweaks to be made.</p> </li> <li> <p>Let them know if there are any specific things you want to be tested.</p> </li> <li> <p>Work closely with QA and make sure any issues are resolved.</p> </li> <li> <p>When the task is fully tested and shown to be bug-free, move it to Completed.</p> </li> <li> <p>Follow the process above for each task assigned to you.</p> </li> </ul>"},{"location":"Tools/creatingtools/","title":"Creating Tools","text":""},{"location":"VR%20Development/VR%20Module/Client/","title":"Client","text":""},{"location":"VR%20Development/VR%20Module/Client/#gethandposition-usercframe-vector3","title":"<code>:GetHandPosition(</code> <code>UserCFrame</code> <code>) \u2192</code><code>Vector3</code>","text":"<p>Returns the position of a UserCFrame</p>"},{"location":"VR%20Development/VR%20Module/Client/#parameters","title":"Parameters","text":"<ul> <li><code>UserCFrame</code></li> </ul>"},{"location":"VR%20Development/VR%20Module/Client/#returns","title":"Returns","text":"<ul> <li><code>Vector3</code></li> </ul> Example <pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal VRModule = require(ReplicatedStorage.Modules.VR)\n\nlocal HandPosition = VRModule:GetHandPosition(Enum.UserCFrame.Head)\n</code></pre>"},{"location":"VR%20Development/VR%20Module/Client/#gethandvelocity-usercframe-vector3","title":"<code>:GetHandVelocity(</code> <code>UserCFrame</code> <code>) \u2192</code><code>Vector3</code>","text":"<p>Returns the velocity vector of any of the controllers. This function is often used when adding VR support to tools.</p>"},{"location":"VR%20Development/VR%20Module/Client/#parameters_1","title":"Parameters","text":"<ul> <li><code>UserCFrame</code></li> </ul>"},{"location":"VR%20Development/VR%20Module/Client/#returns_1","title":"Returns","text":"<ul> <li><code>Vector3</code></li> </ul> Example <pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal VRModule = require(ReplicatedStorage.Modules.VR)\n\nlocal HandVelocity = VRModule:GetHandVelocity(Enum.UserCFrame.Head)\n</code></pre>"},{"location":"VR%20Development/VR%20Module/Client/#getrelativevectortohead-vector3-cframe","title":"<code>:GetRelativeVectorToHead(</code> <code>Vector3</code><code>) \u2192</code> <code>CFrame</code>","text":"<p>Converts a world position to a position relative to the camera (head).</p>"},{"location":"VR%20Development/VR%20Module/Client/#parameters_2","title":"Parameters","text":"<ul> <li><code>Vector3</code></li> </ul>"},{"location":"VR%20Development/VR%20Module/Client/#returns_2","title":"Returns","text":"<ul> <li><code>CFrame</code></li> </ul> Example <pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal VRModule = require(ReplicatedStorage.Modules.VR)\n\nlocal WorldPosition = Vector3.new(0, 0, 0)\nlocal HandVelocity = VRModule:GetRelativeVectorToHead(WorldPosition)\n</code></pre>"},{"location":"VR%20Development/VR%20Module/Server/","title":"Server","text":""},{"location":"VR%20Development/VR%20Module/Server/#getusercframe-usercframe-cframe","title":"<code>:GetUserCFrame(</code> <code>UserCFrame</code> <code>) \u2192</code><code>CFrame</code>","text":"<p>Internal</p> <p>This function should not be used.</p> <p>Returns the controller <code>CFrame</code>. </p>"},{"location":"VR%20Development/VR%20Module/Server/#parameters","title":"Parameters","text":"<ul> <li><code>UserCFrame</code></li> </ul>"},{"location":"VR%20Development/VR%20Module/Server/#returns","title":"Returns","text":"<ul> <li><code>CFrame</code></li> </ul> Example <pre><code>local ServerStorage = game:GetService(\"ServerStorage\")\nlocal ServerVRModule = require(ServerStorage.Modules.VR)\n\nlocal USerCFrame = ServerVRModule:GetUserCFrame(Enum.UserCFrame.Head)\n</code></pre>"}]}